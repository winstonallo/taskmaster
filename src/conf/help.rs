pub fn print_help() {
    println!("Taskmaster - Process Supervisor");
    println!("==============================\n");
    println!("GLOBAL CONFIGURATION OPTIONS:");
    println!("  socketpath       Path to the socket used for connections between taskmaster and its client.");
    println!("                   Defaults to \"/tmp/.taskmaster.sock\".");
    println!("  authgroup        Name of the group to be created for authenticating client (similar to the docker group).");
    println!("                   Defaults to \"taskmaster\".\n");

    println!("PROCESS CONFIGURATION OPTIONS:");
    println!("  [processes.<name>]  Define a process with the given name.\n");
    println!("  cmd                 Command to run in order to start this process.");
    println!("                      Must be an absolute path.");
    println!("                      Required.");
    println!("  args                Arguments to pass to 'cmd'.");
    println!("                      Defaults to [].");
    println!("  processes           Number of processes to start.");
    println!("                      Defaults to 1, max 255.");
    println!("  umask               Mask for files created by the process.");
    println!("                      Defaults to \"022\".");
    println!("  workingdir          Working directory for the process.");
    println!("                      Must be an absolute path.");
    println!("                      Required.");
    println!("  autostart           Start the program automatically when starting taskmaster.");
    println!("                      Defaults to false.");
    println!("  autorestart         Restart the process when it quits, options are:");
    println!("                      - \"no\" (default): Never restart the process automatically.");
    println!("                      - \"on-failure[:max-retries]\": Try to restart the process <max-retries>");
    println!("                        times when it exits unexpectedly. Maximum value for max-retries is 255.");
    println!("                      - \"always\": Always restart when exiting, no matter the status.");
    println!("  backoff             Backoff time (in seconds) for retries.");
    println!("                      Defaults to 5, max 255.");
    println!("  exitcodes           List of exit codes to be interpreted as success.");
    println!("                      Defaults to [0].");
    println!("  startretries        Number of attempts to start the program before giving up.");
    println!("                      Defaults to 3, max 255.");
    println!("  starttime           Time (in seconds) given for the program to startup - if the program");
    println!("                      runs for this time, it will be considered healthy.");
    println!("                      Defaults to 5, max 65536.");
    println!("  stopsignals         List of signals triggering a stop of the process, options are any");
    println!("                      FreeBSD signal (https://www.math.stonybrook.edu/~ccc/dfc/dfc/signals.html).");
    println!("                      Defaults to [\"TERM\"].");
    println!("  stoptime            Time (in seconds) to wait for the process to stop. If it does not stop");
    println!("                      within this time, it will be forcibly killed.");
    println!("                      Defaults to 5, max 255.");
    println!("  stdout              File the standard output of the process should be redirected to.");
    println!("                      Defaults to \"/tmp/<process name>.stdout\".");
    println!("  stderr              File the standard error of the process should be redirected to.");
    println!("                      Defaults to \"/tmp/<process name>.stderr\".");
    println!("  env                 Key value pairs of environment variables to be injected into the process at startup.");
    println!("                      Defaults to [[]].\n");

    println!("HEALTHCHECK CONFIGURATION OPTIONS:");
    println!("  [processes.<name>.healthcheck]  Define a healthcheck for the process.");
    println!("  cmd                 Command to run for healthcheck.");
    println!("                      Must be an absolute path.");
    println!("                      Required.");
    println!("  args                Arguments to pass to the healthcheck command.");
    println!("                      Defaults to [].");
    println!("  timeout             Time, in seconds, given for the healthcheck to run. If it runs longer,");
    println!("                      it will be considered failed.");
    println!("                      Required.");
    println!("  retries             How many times to retry the healthcheck.");
    println!("                      Required.");
    println!("  backoff             How much time (in seconds) to wait after a failed healthcheck before retrying.");
    println!("                      Required.");
}
